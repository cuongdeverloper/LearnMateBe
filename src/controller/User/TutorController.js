const Tutor = require('../../modal/Tutor');
const User = require('../../modal/User');
const SavedTutor = require('../../modal/SavedTutor');

// üîç L·∫•y danh s√°ch tutor c√≥ filter
exports.getTutors = async (req, res) => {
  try {
    const { name, subject, minPrice, maxPrice, minRating, class: classGrade } = req.query;

    let filter = {};

    // L·ªçc theo t√™n tutor (t·ª´ User model)
    let userFilter = {};
    if (name) {
      userFilter.username = { $regex: name, $options: 'i' };
    }

    // L·ªçc theo subject
    if (subject) {
      filter.subjects = { $regex: subject, $options: 'i' };
    }

    // L·ªçc theo class (tutor d·∫°y l·ªõp n√†o)
    if (classGrade) {
      filter.classes = Number(classGrade);  // classes l√† array, n√™n MongoDB s·∫Ω t√¨m c√°c tutor c√≥ l·ªõp n√†y
    }

    // L·ªçc theo kho·∫£ng gi√°
    if (minPrice || maxPrice) {
      filter.pricePerHour = {};
      if (minPrice) filter.pricePerHour.$gte = Number(minPrice);
      if (maxPrice) filter.pricePerHour.$lte = Number(maxPrice);
    }

    // L·ªçc theo rating
    if (minRating) {
      filter.rating = { $gte: Number(minRating) };
    }

    // T√¨m tutor v√† populate user
    let tutors = await Tutor.find(filter).populate({
      path: 'user',
      match: userFilter,
      select: 'username email image phoneNumber gender',
    });

    // Lo·∫°i b·ªè tutor kh√¥ng c√≥ user match khi d√πng `match`
    tutors = tutors.filter(tutor => tutor.user !== null);

    res.json({ success: true, tutors });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
};

exports.getTutorById = async (req, res) => {
  try {
    const tutor = await Tutor.findById(req.params.id)
      .populate('user', 'username email image phoneNumber gender')
      .select('subjects classes pricePerHour description rating'); // L·∫•y th√™m c√°c tr∆∞·ªùng quan tr·ªçng

    if (!tutor) return res.status(404).json({ success: false, message: 'Tutor not found' });

    res.json({ success: true, tutor });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
};

exports.getSavedTutors = async (req, res) => {
  try {
    // req.user.id s·∫Ω ƒë·∫øn t·ª´ middleware x√°c th·ª±c (v√≠ d·ª•: t·ª´ token JWT)
    const savedTutors = await SavedTutor.find({ user: req.user.id })
    .populate({
      path: 'tutor',
      populate: {
        path: 'user',
        select: 'username image' // üëà Ch·ªçn tr∆∞·ªùng c·∫ßn thi·∫øt
      }
    });

    // Tr·∫£ v·ªÅ danh s√°ch c√°c ƒë·ªëi t∆∞·ª£ng Tutor ƒë√£ ƒë∆∞·ª£c populate
    res.status(200).json(savedTutors.map(item => item.tutor));
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch gia s∆∞ ƒë√£ l∆∞u:', error);
    res.status(500).json({ message: 'L·ªói server.' });
  }
};


exports.addSavedTutor = async (req, res) => {
  const { tutorId } = req.params;
  const userId = req.user.id; // L·∫•y ID ng∆∞·ªùi d√πng t·ª´ token

  try {
    // Ki·ªÉm tra xem gia s∆∞ c√≥ t·ªìn t·∫°i kh√¥ng
    const tutorExists = await Tutor.findById(tutorId);
    if (!tutorExists) {
      return res.status(404).json({ message: 'Gia s∆∞ kh√¥ng t·ªìn t·∫°i.' });
    }

    // Ki·ªÉm tra xem ƒë√£ l∆∞u gia s∆∞ n√†y ch∆∞a
    const existingSave = await SavedTutor.findOne({ user: userId, tutor: tutorId });
    if (existingSave) {
      return res.status(400).json({ message: 'Gia s∆∞ ƒë√£ c√≥ trong danh s√°ch l∆∞u c·ªßa b·∫°n.' });
    }

    // T·∫°o m·ªôt b·∫£n ghi SavedTutor m·ªõi
    const newSavedTutor = new SavedTutor({
      user: userId,
      tutor: tutorId,
    });

    await newSavedTutor.save();

    // C√≥ th·ªÉ tr·∫£ v·ªÅ to√†n b·ªô danh s√°ch ƒë√£ l∆∞u ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    const updatedSavedTutors = await SavedTutor.find({ user: userId }).populate('tutor');
    res.status(201).json({
      message: 'Gia s∆∞ ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch.',
      savedTutors: updatedSavedTutors.map(item => item.tutor),
    });
  } catch (error) {
    console.error('L·ªói khi th√™m gia s∆∞ v√†o danh s√°ch:', error);
    res.status(500).json({ message: 'L·ªói server.' });
  }
};


exports.removeSavedTutor = async (req, res) => {
  const { tutorId } = req.params;
  const userId = req.user.id; // L·∫•y ID ng∆∞·ªùi d√πng t·ª´ token

  try {
    const result = await SavedTutor.deleteOne({ user: userId, tutor: tutorId });

    if (result.deletedCount === 0) {
      return res.status(404).json({ message: 'Gia s∆∞ kh√¥ng c√≥ trong danh s√°ch l∆∞u c·ªßa b·∫°n.' });
    }

    // Tr·∫£ v·ªÅ danh s√°ch ƒë√£ l∆∞u sau khi x√≥a
    const updatedSavedTutors = await SavedTutor.find({ user: userId }).populate('tutor');
    res.status(200).json({
      message: 'Gia s∆∞ ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch.',
      savedTutors: updatedSavedTutors.map(item => item.tutor),
    });
  } catch (error) {
    console.error('L·ªói khi x√≥a gia s∆∞ kh·ªèi danh s√°ch:', error);
    res.status(500).json({ message: 'L·ªói server.' });
  }
};